How did viewing a diff between two versions of a file help you see the bug that
was introduced?

It pinpoint the location of the difference for me.

   


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

It could save me time.


What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pros: the commit is created on the need base (saves memory).
Cons: the person might forget to commit.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Git is a version control system oriented for developers. Developers write programs composed of different files that interrelate with each other, so it is necessary to save multiple files in one commit.
Google Docs, on the other hand, is designed for a simple user in mind.


How can you use the commands "git log" and "git diff" to view the history of files?
The info "git log" present for each commit is: commit ID, author, date, commit message.
Compared to "git log", "git log --stat" also provides information like: number of files changed, the name of these files, number of insertions (+), and number of deletions (-).
"git diff" provides the differences between two commits, color-coding in red the deletions and in green the insertions/additions.


How might using version control make you more confident to make changes that could break something?
By having an easy access to checkout an older commit and then comeback to the most recent commit without any trouble gives me the confidence to not be afraid to break something.


Now that you have your workspace set up, what do you want to try using Git for?
I want to try use Git for my upcoming projects/programs.






Git command review
Compare two commits, printing each line that is present in one commit but not the other.

"git diff" will do this. It takes two arguments - the two commit ids to compare. 
"git diff <original file/commit> <updated file/commit>"


Make a copy of an entire Git repository, including the history, onto your own computer.

"git clone" will do this. It takes one argument - the url of the repository to copy. 


Temporarily reset all files in a directory to their state at the time of a specific commit.

"git checkout" will do this. It takes one argument - the commit ID to restore. 


Show the commits made in this repository, starting with the most recent.

"git log" will do this. It doesn't take any arguments.




"scp" - secure copy for a directory 





Behavior of git checkout
Checking out an earlier commit will change the state of at least one file.

This is sometimes true. Git doesn't allow you to save a new commit if no files have been updated, so you might think this is always true. However, it's possible to do the following:

Save a commit (call this commit 1).
Update some files and save another commit (call this commit 2).
Change all the files back to their state during commit 1, then save again (call this commit 3).
This sometimes happens if commit 2 contained a bug, and it's important to fix the bug quickly. The easiest thing to do might be to remove all the changes introduced by commit 2 to fix the bug, then figure out how to safely reintroduce the changes later.

At this point, commit 3 is the latest commit, so if you checkout commit 1, none of the files will be changed. 


Checking out an earlier commit will change the state of more than one file.

Checking out an earlier commit will change the state of every file in the repository.

Both of these are sometimes true. Since each commit tracks the state of all files in the repository, it is possible that checking out an earlier commit will change the state of multiple files, or even all the files in the repository. However, it is possible to save a new commit after changing only one file, so it is possible only one file will change. 


After checking out a commit, the state of all the files in the repository will be from the same point in time.

This is always true. A commit saves a snapshot of all files in the repository at the time the commit was made, so checking out an earlier commit will result in all the files being reverted to their state at the time the commit was made. That is, the files will be in a consistent state.